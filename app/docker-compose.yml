services:
    user-db:
        image: postgres:15-alpine
        container_name: user-db
        environment:
            POSTGRES_DB: ${USER_DB}
            POSTGRES_USER: ${USER}
            POSTGRES_PASSWORD: ${PASSWORD}
        ports:
            - "5433:5432"
        volumes:
            - ./db-init/user-service:/docker-entrypoint-initdb.d
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${USER_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5

    product-db:
        image: postgres:15-alpine
        container_name: product-db
        environment:
            POSTGRES_DB: ${PRODUCT_DB}
            POSTGRES_USER: ${USER}
            POSTGRES_PASSWORD: ${PASSWORD}
        ports:
            - "5434:5432"
        volumes:
            - ./db-init/product-service:/docker-entrypoint-initdb.d
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${PRODUCT_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5

    order-db:
        image: postgres:15-alpine
        container_name: order-db
        environment:
            POSTGRES_DB: ${ORDER_DB}
            POSTGRES_USER: ${USER}
            POSTGRES_PASSWORD: ${PASSWORD}
        ports:
            - "5435:5432"
        volumes:
            - ./db-init/order-service:/docker-entrypoint-initdb.d
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${ORDER_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5

    user-service:
        build:
            context: ./microservices/user
            dockerfile: Dockerfile
        container_name: user-service
        depends_on:
            - kafka
            - user-db
            - redis
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://${USER_DB_HOST}:${USER_DB_PORT}/${USER_DB}
            SPRING_DATASOURCE_USERNAME: ${USER}
            SPRING_DATASOURCE_PASSWORD: ${PASSWORD}
            USER_DB_HOST: ${USER_DB_HOST}
            USER_DB_PORT: ${USER_DB_PORT}
            SPRING_PROFILES_ACTIVE: docker
            PRODUCT_SERVICE_URL: http://product-service:8082
            ORDER_SERVICE_URL: http://order-service:8083
        ports:
            - "8081:8081"

    product-service:
        build:
            context: ./microservices/product
            dockerfile: Dockerfile
        container_name: product-service
        depends_on:
            - kafka
            - product-db
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://${PRODUCT_DB_HOST}:${PRODUCT_DB_PORT}/${PRODUCT_DB}
            SPRING_DATASOURCE_USERNAME: ${USER}
            SPRING_DATASOURCE_PASSWORD: ${PASSWORD}
            PRODUCT_DB_HOST: ${PRODUCT_DB_HOST}
            PRODUCT_DB_PORT: ${PRODUCT_DB_PORT}
            SPRING_PROFILES_ACTIVE: docker
            USER_SERVICE_URL: http://user-service:8081
            ORDER_SERVICE_URL: http://order-service:8083            
        ports:
            - "8082:8082"

    order-service:
        build:
            context: ./microservices/order
            dockerfile: Dockerfile
        container_name: order-service
        depends_on:
            - kafka
            - order-db
        environment:
            SPRING_DATASOURCE_URL: jdbc:postgresql://${ORDER_DB_HOST}:${ORDER_DB_PORT}/${ORDER_DB}
            SPRING_DATASOURCE_USERNAME: ${USER}
            SPRING_DATASOURCE_PASSWORD: ${PASSWORD}
            ORDER_DB_HOST: ${ORDER_DB_HOST}
            ORDER_DB_PORT: ${ORDER_DB_PORT}
            SPRING_PROFILES_ACTIVE: docker
            USER_SERVICE_URL: http://user-service:8081
            PRODUCT_SERVICE_URL: http://product-service:8082
        ports:
            - "8083:8083"

    redis:
        image: redis:latest
        container_name: redis
        ports:
            - "6379:6379"

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1