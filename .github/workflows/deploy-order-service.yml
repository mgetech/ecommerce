name: Deploy Order Service to Cloud Run

on:
  push:
    branches: [kafka-integration]
    # Only run the workflow if the commit message contains "[deploy_order_service]"
  pull_request:
    branches: [kafka-integration]


jobs:
  build-and-deploy:
    if: contains(github.event.head_commit.message, 'deploy order service')
    runs-on: ubuntu-latest
    env:
      REGION: europe-west3
      REPOSITORY: microservice-repo
      IMAGE_NAME: order-service

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: order_service_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/order_service_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
        run: |
          cd app/microservices/order
          bash gradlew test


      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: app/microservices/order
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build & Push Docker image
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          cd app
          docker build -t "$IMAGE_URI" ./microservices/order
          docker push "$IMAGE_URI"

      - name: Deploy to Cloud Run
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          gcloud run deploy ${{ env.IMAGE_NAME }} \
            --image="$IMAGE_URI" \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --set-env-vars="SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/order_service_db?cloudSqlInstance=${{ secrets.GCP_SQL_CONNECTION_NAME }}&socketFactory=com.google.cloud.sql.postgres.SocketFactory,SPRING_DATASOURCE_USERNAME=postgres,SPRING_DATASOURCE_PASSWORD=postgres,USER_SERVICE_URL=https://user-service-716746262210.europe-west3.run.app,PRODUCT_SERVICE_URL=https://product-service-716746262210.europe-west3.run.app"
