name: Deploy User Service to Cloud Run

on:
  push:
    branches: [ci/setup-cloud]
    # Only run the workflow if the commit message contains "[deploy_user_service]"
  pull_request:
    branches: [ci/setup-cloud]


jobs:
  build-and-deploy:
    if: contains(github.event.head_commit.message, 'deploy user service')
    runs-on: ubuntu-latest
    env:
      USER_DB: user_service_db
      PRODUCT_DB: product_service_db
      ORDER_DB: order_service_db

      USER: postgres
      PASSWORD: postgres

      USER_DB_PORT: 5432
      PRODUCT_DB_PORT: 5432
      ORDER_DB_PORT: 5432

      USER_DB_HOST: user-db
      PRODUCT_DB_HOST: product-db
      ORDER_DB_HOST: order-db
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:latest

    steps:
      # 1) Checkout your code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Save service-account JSON key
      - name: Write GCP key file
        run: |
          echo '${{ secrets.GCP_CREDENTIALS_RAW }}' > key.json

      # 3) Docker login directly to gcr.io using _json_key
      - name: Docker login to gcr.io
        run: |
          cat key.json | docker login -u _json_key --password-stdin https://gcr.io

      # 4) Build the Docker image
      - name: Build user-service image
        run: |
          docker build \
            -t "${IMAGE}" \
            ./app/microservices/user

      # 5) Push to Container Registry (gcr.io)
      - name: Push image to gcr.io
        run: |
          docker push "${IMAGE}"

      # 6) Authenticate gcloud for deployment
      - name: Authenticate gcloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_RAW }}

      # 7) Set up gcloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # 8) Deploy to Cloud Run with Cloud SQL socket factory
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy user-service \
            --image="${IMAGE}" \
            --platform=managed \
            --region=europe-west3 \
            --allow-unauthenticated \
            --set-env-vars=\
            SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/user_service_db?cloudSqlInstance=${{ secrets.GCP_SQL_CONNECTION_NAME }}&socketFactory=com.google.cloud.sql.postgres.SocketFactory,\
            SPRING_DATASOURCE_USERNAME=postgres,\
            SPRING_DATASOURCE_PASSWORD=postgres
