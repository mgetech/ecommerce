name: Deploy User Service to Cloud Run

on:
  push:
    branches: [ci/setup-cloud]
    # Only run the workflow if the commit message contains "[deploy_user_service]"
  pull_request:
    branches: [ci/setup-cloud]


jobs:
  build-and-deploy:
    if: contains(github.event.head_commit.message, 'deploy user service')
    runs-on: ubuntu-latest
    env:
      USER_DB: user_service_db
      PRODUCT_DB: product_service_db
      ORDER_DB: order_service_db

      USER: postgres
      PASSWORD: postgres

      USER_DB_PORT: 5432
      PRODUCT_DB_PORT: 5432
      ORDER_DB_PORT: 5432

      USER_DB_HOST: user-db
      PRODUCT_DB_HOST: product-db
      ORDER_DB_HOST: order-db
    steps:
      # 1) Checkout your code
      - name: Checkout repo
        uses: actions/checkout@v4


      # 2) Authenticate to GCP
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2' # Use a recent version of the auth action
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_RAW }}

      # 3) Set up GCP CLI
      # The setup-gcloud action will now use the credentials established by the 'auth' step
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2' # Use a recent version
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          # No 'service_account_key' or 'export_default_credentials' here

      # 3) Build & push user-service image
      - name: Build & push user-service
        run: |
          cd app  # Navigate to the folder containing microservices
          # Use the standard gcr.io tag format
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:latest ./microservices/user
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:latest # Push with the tag


      # 4) Deploy to Cloud Run with Cloud SQL attached
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy user-service \
            --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/user-service:latest \
            --platform=managed \
            --region=europe-west3 \
            --allow-unauthenticated \
            --set-env-vars=\
            SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/user_service_db?cloudSqlInstance=${{ secrets.GCP_SQL_CONNECTION_NAME }}&socketFactory=com.google.cloud.sql.postgres.SocketFactory,\
            SPRING_DATASOURCE_USERNAME=postgres,\
            SPRING_DATASOURCE_PASSWORD=postgres
