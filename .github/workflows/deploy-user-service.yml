name: Deploy User Service to Cloud Run

on:
  push:
    branches: [ci/setup-cloud]
    # Only run the workflow if the commit message contains "[deploy_user_service]"
  pull_request:
    branches: [ci/setup-cloud]


jobs:
  build-and-deploy:
    if: contains(github.event.head_commit.message, 'deploy user service')
    runs-on: ubuntu-latest
    env:
      USER_DB: user_service_db
      PRODUCT_DB: product_service_db
      ORDER_DB: order_service_db

      USER: postgres
      PASSWORD: postgres

      USER_DB_PORT: 5432
      PRODUCT_DB_PORT: 5432
      ORDER_DB_PORT: 5432

      USER_DB_HOST: user-db
      PRODUCT_DB_HOST: product-db
      ORDER_DB_HOST: order-db

      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      AR_LOCATION: europe-west3
      AR_REPOSITORY: microservice-repo
      IMAGE_NAME: user-service
      IMAGE_URI: ${AR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${AR_REPOSITORY}/${IMAGE_NAME}:latest

    steps:
      # 1) Checkout your code
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2) Authenticate to GCP
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_RAW }}'

      # 3) Set up Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      # 4) Configure Docker credential helper for your AR repo
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${AR_LOCATION}-docker.pkg.dev --quiet

      # 5) Build & push user-service image to Artifact Registry
      - name: Build & push user-service
        run: |
          cd app  # where your microservices folder lives
          docker build \
            -t "${IMAGE_URI}" \
            ./microservices/user
          docker push "${IMAGE_URI}"

      # 6) Deploy to Cloud Run with Cloud SQL attached
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${IMAGE_NAME} \
            --image="${IMAGE_URI}" \
            --platform=managed \
            --region=${AR_LOCATION} \
            --allow-unauthenticated \
            --set-env-vars=\
            SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/user_service_db?cloudSqlInstance=${{ secrets.GCP_SQL_CONNECTION_NAME }}&socketFactory=com.google.cloud.sql.postgres.SocketFactory,\
            SPRING_DATASOURCE_USERNAME=postgres,\
            SPRING_DATASOURCE_PASSWORD=postgres
